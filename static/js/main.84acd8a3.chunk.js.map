{"version":3,"sources":["logo.svg","CustomerTable/index.jsx","App.js","CustomerSearch/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CustomerTable","Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","customer","props","customerInfo","react_default","a","createElement","className","name","id","age","location","gender","income","CustomerSearch","_this","state","searchContent","e","setState","target","value","_this2","customers","db","trim","toLowerCase","length","filter","match","type","onChange","handleChange","placeholder","map","i","src_CustomerTable","key","Boolean","window","hostname","ReactDOM","render","src_CustomerSearch","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84acd8a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nimport './style.css'\n\nclass CustomerTable extends Component {\n  constructor(){\n    super()\n  }\n\n  render(){\n    let customer = this.props.customerInfo\n    return(\n      <div className=\"customer-table-row\">\n        <div className=\"customer-name\"> {customer.name }</div>\n        <table>\n          <tbody>\n            <tr>\n              <th>Customer ID</th>\n              <th>Age</th>\n              <th>Location</th>\n              <th>Gender</th>\n              <th>Income</th>\n            </tr>\n            <tr>\n              <td>{customer.id}</td>\n              <td>{customer.age}</td>\n              <td>{customer.location}</td>\n              <td>{customer.gender}</td>\n              <td>{customer.income}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default CustomerTable\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>a\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\n\nimport CustomerTable from '../CustomerTable'\nimport './style.css'\n\nclass CustomerSearch extends Component {\n  constructor(){\n    super()\n\n    this.state = {\n      searchContent: ''\n    }\n  }\n\n  handleChange(e) {\n    this.setState({\n      searchContent: e.target.value\n    })\n  }\n  render(){\n    // db = this.props.db\n    // console.log(this.props.db[0])\n    let customers = this.props.db\n    let searchContent = this.state.searchContent.trim().toLowerCase()\n    if(searchContent.length > 0){\n      customers = customers.filter(function(customer){\n        return customer.name.toLowerCase().match(searchContent)\n            || customer.id.toLowerCase().match(searchContent)\n            || customer.age.toLowerCase().match(searchContent)\n            || customer.location.toLowerCase().match(searchContent)\n            || customer.gender.toLowerCase().match(searchContent)\n            || customer.income.toLowerCase().match(searchContent)\n      })\n    }\n    return(\n      <div className=\"customer-search-wrapper\">\n        <h1> Unified Customer Search </h1>\n        <input type=\"text\"\n               value={this.state.searchContent}\n               onChange={(e) => {this.handleChange(e)}}\n               placeholder=\"Search...\" />\n        <div className=\"search-result\">\n          {\n            customers.map(function(customer, i){\n              return <CustomerTable customerInfo={customer} key={i} />\n            })\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CustomerSearch\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport CustomerSearch from './CustomerSearch'\nimport * as serviceWorker from './serviceWorker';\n\nconst db = [\n  {\n    name: 'Jeremy Clarke',\n    id: '12345',\n    age: '21',\n    location: 'San Jose',\n    gender: 'Male',\n    income: '$120,000'\n  },\n  {\n    name: 'Metty Bing',\n    id: '12225',\n    age: '25',\n    location: 'Fremont',\n    gender: 'Female',\n    income: '$950,000'\n  },\n  {\n    name: 'Tanaya Smith',\n    id: '12455',\n    age: '18',\n    location: 'New York City',\n    gender: 'Female',\n    income: '$160,000'\n  },\n  {\n    name: 'Sparsh Saxena',\n    id: '13345',\n    age: '26',\n    location: 'Philadephia',\n    gender: 'Male',\n    income: '$200,000'\n  },\n  {\n    name: 'Philip Anderson',\n    id: '13385',\n    age: '32',\n    location: 'Sunnyvale',\n    gender: 'Male',\n    income: '$280,000'\n  }\n]\nconst items = 'hehe'\n\n\nReactDOM.render(<CustomerSearch db = {db} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}